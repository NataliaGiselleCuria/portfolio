---
import icons from "../../src/data/icons.json";
import projects from "../../src/data/projects.json";

const workProjects = projects.projects.filter(
    (project) => project.type === "work",
);
---

<section id="experience" class="content">
    <h3 class="entry">Experiencia</h3>
    <div class="work">
        {
            workProjects.map((project, index) => (
                <div class="slide container row entry" id={`work-${index + 1}`}>
                    <div class="project-description col-xxl">
                        <h6>{project.date}</h6>
                        <h5 class="animated-text">{project.title}</h5>
                        <div class="description">
                    <p class="collapsed-text" set:html={project.description.join("<br>")}></p>
                    {project.description.length > 2 && (
                        <button class="toggle-btn">
                            Ver más
                        </button>
                    )}
                </div>
                        <div class="technologies">
                            {project.technologies.map((tech) => {
                                const icon = icons.icons.find(
                                    (icon) => icon.name === tech,
                                );
                                return (
                                    <span class="tech">
                                        {icon ? icon.name : tech}
                                    </span>
                                );
                            })}
                        </div>
                        <span class="links">
                            <a
                                href={project.liveDemo}
                                target="_blank"
                                aria-label={`Página de ${project.title}`}
                            >
                                Ver Demo
                            </a>
                            <a
                                href={project.sourceCode}
                                target="_blank"
                                aria-label={`Código de ${project.title}`}
                            >
                                GitHub
                            </a>
                            {project.sourceCode2 ? (
                                <a
                                    href={project.sourceCode2}
                                    target="_blank"
                                    aria-label={`Código de ${project.title}`}
                                >
                                    Backend
                                </a>
                            ) : (
                                ""
                            )}
                        </span>
                    </div>
                    <div class="mockups col-xxl">
                        <div class="desktop">
                            {project.imgArray ? (
                                project.imgArray.map((imgSrc, imgIndex) => (
                                    <img
                                        src={imgSrc}
                                        alt={`Vista ${imgIndex + 1} de ${project.title}`}
                                        class="project-image"
                                        data-images={JSON.stringify(
                                            project.imgArray,
                                        )}
                                        data-index={imgIndex}
                                        loading="lazy"
                                    />
                                ))
                            ) : project.imgDesktop ? (
                                <img
                                    src={project.imgDesktop}
                                    alt={`Vista de escritorio de ${project.title}`}
                                    class="project-image"
                                    data-images={JSON.stringify([
                                        project.imgDesktop,
                                    ])}
                                    data-index="0"
                                    loading="lazy"
                                />
                            ) : null}
                            {project.videoArray
                                ? project.videoArray.map(
                                      (videoSrc, videoIndex) => (
                                          <video
                                              class="project-video"
                                              controls
                                              data-videos={JSON.stringify(
                                                  project.videoArray,
                                              )}
                                              data-index={videoIndex}
                                          >
                                              <source
                                                  src={videoSrc}
                                                  type="video/mp4"
                                              />
                                          </video>
                                      ),
                                  )
                                : null}
                        </div>
                    </div>
                </div>
            ))
        }
    </div>
    <div class="modal hidden">
        <div class="modal-content">
            <button class="close-button">&times;</button>
            <img src="" alt="Imagen de proyecto" class="modal-image" />
        </div>
    </div>
</section>

<script>
    // modalHandler.js

    document.addEventListener("DOMContentLoaded", function () {
        const modal = document.querySelector(".modal");
        const modalImage = document.querySelector(".modal-image");
        const closeButton = document.querySelector(".close-button");
        let currentImages = [];
        let currentIndex = 0;

        // Abrir el modal con la imagen seleccionada
        document.querySelectorAll(".project-image").forEach((img) => {
            img.addEventListener("click", () => {
                const images = img.getAttribute("data-images");
                const index = img.getAttribute("data-index");

                currentImages = JSON.parse(images ?? "[]");
                currentIndex = parseInt(index ?? "0", 10);
                openModal();
            });
        });

        // Función para abrir el modal y mostrar la imagen actual
        function openModal() {
            if (modal) {
                modal.classList.remove("hidden");
                modalImage.src = currentImages[currentIndex] ?? "";
            }
        }

        // Función para cerrar el modal
        function closeModal() {
                modal?.classList.add("hidden");
        }

        // Eventos de botones
        closeButton?.addEventListener("click", closeModal);
        

        // Cerrar modal al hacer click fuera de la imagen
        modal?.addEventListener("click", (e) => {
            if (e.target === modal) closeModal();
        });
    });

    // Descripción desplegable
    document.addEventListener("DOMContentLoaded", function () {
        const modal = document.querySelector(".toggle-btn");
        modal?.addEventListener("click", toggleDescription);
    })

    function toggleDescription(event) {
        const button = event.target;
        const description = button.previousElementSibling;

        description.classList.toggle("expanded");
        button.textContent = description.classList.contains("expanded")
            ? "Ver menos"
            : "Ver más";
    }
    
</script>

<style>
    h6 {
        font-family: "Roboto Condensed", sans-serif;
        font-size: 15px;
        font-weight: 400;
        line-height: normal;
    }

    .slide {
        flex-direction: column;
        padding: 5% 0;
        padding: 20px;
        background: #17072385;
        border: 1px solid var(--alt);
        transition: all 0.5s ease-in-out;
    }

    .slide:hover {
        background: #160735;
    }

    .mockups {
        overflow: hidden;
    }

    .desktop {
        display: flex;
        gap: 10px;
        padding: 10px 0;
        overflow-x: scroll;
    }

    .desktop img,
    .desktop video {
        width: 70%;
        height: auto;
        object-fit: cover;
    }

    .desktop::-webkit-scrollbar {
        height: 5px;
    }

    /* Track */
    .desktop::-webkit-scrollbar-track {
        background: var(--back);
    }

    /* Handle */
    .desktop::-webkit-scrollbar-thumb {
        background: var(--alt);
    }

    /* Handle on hover */
    .desktop::-webkit-scrollbar-thumb:hover {
        background: var(--focus);
    }

    .links a::after {
        background-color: #c7bbbb;
    }

    .modal.hidden {
        display: none;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2;
        padding: 20px;
    }

    .modal-content {
        position: relative;
        text-align: center;
        width: 70%;
        height: fit-content;
    }

    .modal-image {
        width: auto;
        height: 100%;
    }

    .close-button {
        position: absolute;
        top: 50%;
        background: none;
        border: none;
        color: white;
        font-size: 2rem;
        cursor: pointer;
        transform: translateY(-50%);
        z-index: 1001;
    }

    .close-button {
        top: 1rem;
        right: 1rem;
    }

    /* Descripción desplegable */
    .collapsed-text {
        max-height: 3em; /* Ajusta para que solo se vean 2-3 líneas */
        overflow: hidden;
        transition: max-height 0.3s ease-in-out;
    }

    .collapsed-text.expanded {
        max-height: 1000px; /* Se expande completamente */
    }

    .toggle-btn {
        background: none;
        border: none;
        color: blue;
        cursor: pointer;
        font-size: 1rem;
        margin-top: 5px;
    }

    .toggle-btn:hover {
        text-decoration: underline;
    }
</style>
